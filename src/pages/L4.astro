---
import MainLayout from "../layouts/main-layout.astro";
---

<MainLayout title="L4 Cache">
  <div class="my-32 mx-auto max-w-6xl px-8">
    <div class="space-y-6">
      <div
        class="font-mono text-xs text-black/40 flex justify-between items-center"
      >
        <span>INTERACTIVE_MEMORY_SEGMENT</span>
        <span>L4_CACHE: EXPERIMENTAL</span>
      </div>

      <h1 class="text-3xl font-light mb-8">L4 Cache: Interactive Memory</h1>

      <div
        class="border border-black/10 overflow-hidden p-8 rounded-lg min-h-screen/50"
      >
        <div
          id="neural-field"
          class="w-full h-[60vh] bg-black/5 rounded relative overflow-hidden min-h-screen/50"
        >

        </div>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  // Basic neural network visualization
  class NeuralField {
    constructor(container) {
      this.container = container;
      this.canvas = document.createElement("canvas");
      this.ctx = this.canvas.getContext("2d");
      this.container.appendChild(this.canvas);
      this.nodes = [];
      this.connections = [];
      this.mousePosition = { x: 0, y: 0 };
      this.init();
    }

    init() {
      // Set canvas dimensions
      this.resize();
      window.addEventListener("resize", () => this.resize());

      // Track mouse position
      this.container.addEventListener("mousemove", (e) => {
        const rect = this.container.getBoundingClientRect();
        this.mousePosition = {
          x: e.clientX - rect.left,
          y: e.clientY - rect.top,
        };
      });

      // Create nodes
      const nodeCount = 100;
      for (let i = 0; i < nodeCount; i++) {
        this.nodes.push({
          x: Math.random() * this.canvas.width,
          y: Math.random() * this.canvas.height,
          radius: Math.random() * 2 + 1,
          vx: (Math.random() - 0.5) * 0.5,
          vy: (Math.random() - 0.5) * 0.5,
          color: `rgba(0, 0, 0, ${Math.random() * 0.5 + 0.1})`,
          activation: 0,
        });
      }

      // Start animation
      this.animate();
    }

    resize() {
      this.canvas.width = this.container.clientWidth;
      this.canvas.height = this.container.clientHeight;
    }

    animate() {
      this.update();
      this.draw();
      requestAnimationFrame(() => this.animate());
    }

    update() {
      // Update nodes
      this.nodes.forEach((node) => {
        // Move nodes
        node.x += node.vx;
        node.y += node.vy;

        // Bounce off walls
        if (node.x < 0 || node.x > this.canvas.width) node.vx *= -1;
        if (node.y < 0 || node.y > this.canvas.height) node.vy *= -1;

        // Calculate distance to mouse
        const dx = this.mousePosition.x - node.x;
        const dy = this.mousePosition.y - node.y;
        const distance = Math.sqrt(dx * dx + dy * dy);

        // Activate nodes near mouse
        if (distance < 100) {
          node.activation = Math.max(1 - distance / 100, 0);

          // Nodes slightly repel from mouse
          const repelFactor = 0.02 * node.activation;
          node.vx -= (dx * repelFactor) / distance;
          node.vy -= (dy * repelFactor) / distance;
        } else {
          node.activation *= 0.95; // Fade activation
        }
      });
    }

    draw() {
      // Clear canvas
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

      // Draw connections
      this.ctx.strokeStyle = "rgba(0, 0, 0, 0.1)";
      this.ctx.lineWidth = 0.5;

      for (let i = 0; i < this.nodes.length; i++) {
        const nodeA = this.nodes[i];

        for (let j = i + 1; j < this.nodes.length; j++) {
          const nodeB = this.nodes[j];

          const dx = nodeB.x - nodeA.x;
          const dy = nodeB.y - nodeA.y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < 100) {
            const activation = Math.max(nodeA.activation, nodeB.activation);
            const opacity = (1 - distance / 100) * 0.2 + activation * 0.8;

            this.ctx.beginPath();
            this.ctx.strokeStyle = `rgba(0, 0, 0, ${opacity})`;
            this.ctx.moveTo(nodeA.x, nodeA.y);
            this.ctx.lineTo(nodeB.x, nodeB.y);
            this.ctx.stroke();
          }
        }
      }

      // Draw nodes
      this.nodes.forEach((node) => {
        this.ctx.beginPath();
        const radius = node.radius * (1 + node.activation * 2);
        this.ctx.arc(node.x, node.y, radius, 0, Math.PI * 2);
        this.ctx.fillStyle =
          node.activation > 0.1
            ? `rgba(0, 0, 0, ${0.3 + node.activation * 0.7})`
            : node.color;
        this.ctx.fill();
      });
    }
  }

  function initializeNeuralField() {
    const container = document.getElementById("neural-field");
    if (container) {
      // Nulstil containeren først for at undgå overlappende instances
      container.innerHTML = '';
      new NeuralField(container);
    }
  }

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", initializeNeuralField);

  // Also handle Astro page transitions if used
  document.addEventListener("astro:page-load", initializeNeuralField);
</script>

